#ifndef U8G2EZ_H
#define U8G2EZ_H


#include <Arduino.h>
#include <U8g2lib.h>
#include <EspNowEZ.h>

#ifdef U8X8_HAVE_HW_SPI
#include <SPI.h>
#endif
#ifdef U8X8_HAVE_HW_I2C
#include <Wire.h>
#endif


const unsigned char RIOTLogo[1024] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x78, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x70, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x70, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0x0f, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0x0f, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0xf8, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x5f, 0x00, 0x00, 
    0x00, 0x00, 0xfc, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0xfc, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x7f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x80, 0xff, 0x07, 0x00, 0x00, 0xc0, 0x3f, 0x00, 0x06, 0x00, 0x78, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x00, 0xf8, 0x87, 0x1f, 0x00, 0xf0, 0xff, 0x01, 0x06, 0x00, 0x78, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x00, 0xf0, 0x87, 0x1f, 0x00, 0xfc, 0xff, 0x03, 0x06, 0x00, 0x38, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x00, 0xe0, 0x87, 0x1f, 0x00, 0xfe, 0xff, 0x07, 0x06, 0x00, 0x78, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x00, 0xc0, 0x87, 0x1f, 0x00, 0xff, 0xff, 0x0f, 0x06, 0x00, 0x78, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x38, 0xc0, 0x87, 0x1f, 0x80, 0xff, 0xff, 0x1f, 0x06, 0x00, 0x78, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0xf8, 0xc0, 0x87, 0x1f, 0x80, 0x7f, 0xe0, 0x3f, 0xfe, 0xc0, 0x7f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0xf8, 0xc0, 0x87, 0x1f, 0xc0, 0x3f, 0x80, 0x3f, 0xfe, 0xc0, 0x7f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0xf8, 0xc0, 0x87, 0x1f, 0xc0, 0x1f, 0x80, 0x3f, 0xfe, 0xc0, 0x7f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0xf8, 0xc0, 0x87, 0x1f, 0xc0, 0x0f, 0x00, 0x7f, 0xfe, 0xc0, 0x7f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x78, 0xc0, 0x87, 0x1f, 0xe0, 0x0f, 0x00, 0x7f, 0xfe, 0xc0, 0x7f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x00, 0xe0, 0x87, 0x1f, 0xe0, 0x0f, 0x00, 0x7e, 0xfe, 0xc0, 0x7f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x00, 0xe0, 0x87, 0x1f, 0xe0, 0x0f, 0x00, 0x7e, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x00, 0xf8, 0x87, 0x1f, 0xe0, 0x0f, 0x00, 0x7e, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x00, 0xfe, 0x87, 0x1f, 0xc0, 0x0f, 0x00, 0x7f, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x08, 0xfc, 0x87, 0x1f, 0xc0, 0x1f, 0x00, 0x3f, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x08, 0xf8, 0x87, 0x1f, 0xc0, 0x1f, 0x80, 0x3f, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x18, 0xf0, 0x87, 0x1f, 0x80, 0x7f, 0xc0, 0x3f, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x38, 0xf0, 0x87, 0x1f, 0x80, 0xff, 0xff, 0x1f, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x38, 0xe0, 0x87, 0x1f, 0x00, 0xff, 0xff, 0x0f, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x78, 0xc0, 0x87, 0x1f, 0x00, 0xfe, 0xff, 0x0f, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0xf8, 0x80, 0x87, 0x1f, 0x00, 0xfc, 0xff, 0x03, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0xf8, 0x00, 0x87, 0x1f, 0x00, 0xf8, 0xff, 0x01, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0xf8, 0x01, 0x87, 0x1f, 0x00, 0xe0, 0x7f, 0x00, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0xfc, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0xfc, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0xf8, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x1f, 0x0f, 0x8f, 0x8f, 0x07, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x1f, 0x0f, 0x8f, 0x8f, 0x07, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x1f, 0x0f, 0x8f, 0x8f, 0x07, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x1f, 0x0f, 0x8f, 0x8f, 0x07, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x1f, 0x0f, 0x8f, 0x8f, 0x07, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x1f, 0x0f, 0x8f, 0x8f, 0x07, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x1f, 0x0f, 0x8f, 0x8f, 0x07, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x1f, 0x0f, 0x8f, 0x8f, 0x07, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x1f, 0x0f, 0x8f, 0x8f, 0x07, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00
};

U8G2_SSD1309_128X64_NONAME2_F_HW_I2C u8g2(U8G2_R2, U8X8_PIN_NONE, /* clock=*/ 8, /* data=*/ 9);



void drawLogo(){
    u8g2.clearBuffer();
    u8g2.drawXBMP(0, 0, 128, 64, RIOTLogo);
    u8g2.sendBuffer();
    delay(2000);  // Show logo for 2 seconds
    

}

void U8G2EZ_init(){
    u8g2.begin();
    u8g2.setFont(u8g2_font_t0_12b_mf);
    u8g2.setColorIndex(1);
    drawLogo();
    Serial.println("Printing logo:");
}

void drawSimple(const char *str, int d, int x, int y, bool setScreen){
    
    u8g2.setFont(u8g2_font_ncenB08_tr); // Set any readable font
    u8g2.drawStr(x, y, str);
    if(setScreen){
    u8g2.sendBuffer();
    delay(d);
    }
    
}




void drawReceivers(String foundRec[], int selection){
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_helvR08_tr); // Set any readable font
    u8g2.drawStr(0, 10, "Looking for Receivers" );
   if(sizeof(foundRec) > 0){
        for(int i = 0; i < sizeof(foundRec); i++){
            if(i == selection){
                u8g2.drawButtonUTF8(62,23+(i*10), U8G2_BTN_HCENTER|U8G2_BTN_BW2,0,0,0,foundRec[i].c_str());

            } else{
                u8g2.drawButtonUTF8(62,23+(i*10), U8G2_BTN_HCENTER|U8G2_BTN_INV,0,0,0,foundRec[i].c_str());
            }
        }
    }
    else{
        drawSimple("No Receivers Found!",0,0,20,true);
    } 
/*
    u8g2.drawStr(0,50, "Selection:");
    char buf[5];
    snprintf(buf, sizeof(buf), "%d", selection);
    u8g2.drawStr(0,60, buf);

*/
    u8g2.sendBuffer();


}

void printMainMenu(uint16_t analogPins[], bool digitalPins[], uint8_t dir[], uint8_t mag[], bool connected){
      u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_5x8_tf);

  uint8_t line = 1;

  // Display digital pin states
  for (uint8_t i = 0; i < sizeof(digitalPins); ++i) {
    char buf[7];
    snprintf(buf, sizeof(buf), "D%d: %s", i, digitalPins[i] ? "1" : "0");
    u8g2.drawStr(0, line * 8, buf);
    line++;
  }

  // Display analog pin readings
  for (uint8_t i = 0; i < sizeof(analogPins); ++i) {
    int val = analogRead(analogPins[i]);
    char buf[9];
    snprintf(buf, sizeof(buf), "A%d: %4d", i, analogPins[i]);
    u8g2.drawStr(64, i * 8 + 8, buf);
  }

  char buf1[12];
  char buf2[12];
  char buf3[15];

  snprintf(buf1, sizeof(buf1), "%d -- %d",dir[0], dir[1] );
  u8g2.drawStr(0, 5 * 8, buf1);
  snprintf(buf2, sizeof(buf2), "%d -- %d",mag[0], mag[1]);
  u8g2.drawStr(0, 6*8,buf2);
  snprintf(buf3, sizeof(buf3), "CONNECTED?: %d",connected);
  u8g2.drawStr(0, 7*8,buf3);


  u8g2.sendBuffer();

}


void drawConfimReceiver(String text, uint8_t selMac[]){
    u8g2.clearBuffer();
    u8g2.drawStr(0, 10, "Selecting Radio:" );

    char bufMac[25];
    snprintf(bufMac, sizeof(bufMac), "%d:%d:%d:%d:%d:%d",selMac[0], selMac[1],selMac[2],selMac[3],selMac[4],selMac[5] );
    u8g2.drawStr(0,30, bufMac);

    u8g2.sendBuffer();
}
        



#endif