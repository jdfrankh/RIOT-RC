#ifndef U8G2EZ_H
#define U8G2EZ_H


#include <Arduino.h>
#include <U8g2lib.h>
#include <EspNowEZ.h>

#ifdef U8X8_HAVE_HW_SPI
#include <SPI.h>
#endif
#ifdef U8X8_HAVE_HW_I2C
#include <Wire.h>
#endif


const unsigned char RIOTLogo[1024] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x78, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x70, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x70, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0x0f, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0x0f, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0xf8, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x5f, 0x00, 0x00, 
    0x00, 0x00, 0xfc, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0xfc, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x7f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x80, 0xff, 0x07, 0x00, 0x00, 0xc0, 0x3f, 0x00, 0x06, 0x00, 0x78, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x00, 0xf8, 0x87, 0x1f, 0x00, 0xf0, 0xff, 0x01, 0x06, 0x00, 0x78, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x00, 0xf0, 0x87, 0x1f, 0x00, 0xfc, 0xff, 0x03, 0x06, 0x00, 0x38, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x00, 0xe0, 0x87, 0x1f, 0x00, 0xfe, 0xff, 0x07, 0x06, 0x00, 0x78, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x00, 0xc0, 0x87, 0x1f, 0x00, 0xff, 0xff, 0x0f, 0x06, 0x00, 0x78, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x38, 0xc0, 0x87, 0x1f, 0x80, 0xff, 0xff, 0x1f, 0x06, 0x00, 0x78, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0xf8, 0xc0, 0x87, 0x1f, 0x80, 0x7f, 0xe0, 0x3f, 0xfe, 0xc0, 0x7f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0xf8, 0xc0, 0x87, 0x1f, 0xc0, 0x3f, 0x80, 0x3f, 0xfe, 0xc0, 0x7f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0xf8, 0xc0, 0x87, 0x1f, 0xc0, 0x1f, 0x80, 0x3f, 0xfe, 0xc0, 0x7f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0xf8, 0xc0, 0x87, 0x1f, 0xc0, 0x0f, 0x00, 0x7f, 0xfe, 0xc0, 0x7f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x78, 0xc0, 0x87, 0x1f, 0xe0, 0x0f, 0x00, 0x7f, 0xfe, 0xc0, 0x7f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x00, 0xe0, 0x87, 0x1f, 0xe0, 0x0f, 0x00, 0x7e, 0xfe, 0xc0, 0x7f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x00, 0xe0, 0x87, 0x1f, 0xe0, 0x0f, 0x00, 0x7e, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x00, 0xf8, 0x87, 0x1f, 0xe0, 0x0f, 0x00, 0x7e, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x00, 0xfe, 0x87, 0x1f, 0xc0, 0x0f, 0x00, 0x7f, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x08, 0xfc, 0x87, 0x1f, 0xc0, 0x1f, 0x00, 0x3f, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x08, 0xf8, 0x87, 0x1f, 0xc0, 0x1f, 0x80, 0x3f, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x18, 0xf0, 0x87, 0x1f, 0x80, 0x7f, 0xc0, 0x3f, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x38, 0xf0, 0x87, 0x1f, 0x80, 0xff, 0xff, 0x1f, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x38, 0xe0, 0x87, 0x1f, 0x00, 0xff, 0xff, 0x0f, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0x78, 0xc0, 0x87, 0x1f, 0x00, 0xfe, 0xff, 0x0f, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0xf8, 0x80, 0x87, 0x1f, 0x00, 0xfc, 0xff, 0x03, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0xf8, 0x00, 0x87, 0x1f, 0x00, 0xf8, 0xff, 0x01, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x1c, 0xf8, 0x01, 0x87, 0x1f, 0x00, 0xe0, 0x7f, 0x00, 0xfe, 0xc0, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0xfc, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0xfc, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0xf8, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x3f, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x1f, 0x0f, 0x8f, 0x8f, 0x07, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x1f, 0x0f, 0x8f, 0x8f, 0x07, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x1f, 0x0f, 0x8f, 0x8f, 0x07, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x1f, 0x0f, 0x8f, 0x8f, 0x07, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x1f, 0x0f, 0x8f, 0x8f, 0x07, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x1f, 0x0f, 0x8f, 0x8f, 0x07, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x1f, 0x0f, 0x8f, 0x8f, 0x07, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x1f, 0x0f, 0x8f, 0x8f, 0x07, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x1f, 0x0f, 0x8f, 0x8f, 0x07, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00
};


// '0-25Battery', 28x15px
const unsigned char myBitmap0_25Battery [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x3f, 0x00, 
	0x10, 0x00, 0x20, 0x00, 0x10, 0x00, 0xe0, 0x01, 0x10, 0x00, 0x20, 0x01, 0x10, 0x00, 0x20, 0x01, 
	0x10, 0x00, 0x20, 0x01, 0x10, 0x00, 0xe0, 0x01, 0x10, 0x00, 0x20, 0x00, 0xf0, 0xff, 0x3f, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '25-50Battery', 28x15px
const unsigned char myBitmap25_50Battery [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x3f, 0x00, 
	0xf0, 0x00, 0x20, 0x00, 0xf0, 0x00, 0xe0, 0x01, 0xf0, 0x00, 0x20, 0x01, 0xf0, 0x00, 0x20, 0x01, 
	0xf0, 0x00, 0x20, 0x01, 0xf0, 0x00, 0xe0, 0x01, 0xf0, 0x00, 0x20, 0x00, 0xf0, 0xff, 0x3f, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '50-75Battery', 28x15px
const unsigned char myBitmap50_75Battery [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x3f, 0x00, 
	0xf0, 0x7f, 0x20, 0x00, 0xf0, 0x7f, 0xe0, 0x01, 0xf0, 0x7f, 0x20, 0x01, 0xf0, 0x7f, 0x20, 0x01, 
	0xf0, 0x7f, 0x20, 0x01, 0xf0, 0x7f, 0xe0, 0x01, 0xf0, 0x7f, 0x20, 0x00, 0xf0, 0xff, 0x3f, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '75-100Battery', 28x15px
const unsigned char myBitmap75_100Battery [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x3f, 0x00, 
	0xf0, 0xff, 0x3f, 0x00, 0xf0, 0xff, 0xff, 0x01, 0xf0, 0xff, 0x3f, 0x01, 0xf0, 0xff, 0x3f, 0x01, 
	0xf0, 0xff, 0x3f, 0x01, 0xf0, 0xff, 0xff, 0x01, 0xf0, 0xff, 0x3f, 0x00, 0xf0, 0xff, 0x3f, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'ButtonPressed', 28x15px
const unsigned char myBitmapButtonPressed [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0xf8, 0x01, 0x00, 
	0x00, 0xfc, 0x03, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0xfe, 0x07, 0x00, 
	0x00, 0xfe, 0x07, 0x00, 0x00, 0xfc, 0x03, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'ButtonUnpressed', 28x15px
const unsigned char myBitmapButtonUnpressed [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 
	0x00, 0x04, 0x02, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x02, 0x04, 0x00, 
	0x00, 0x02, 0x04, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'Connected', 28x15px
const unsigned char myBitmapConnected [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xfc, 0x07, 0x00, 0x00, 0x06, 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 
	0x00, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'JoystickCenter', 28x15px
const unsigned char myBitmapJoystickCenter [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x62, 0x00, 0x00, 
	0x00, 0xf0, 0x09, 0x00, 0x00, 0xf9, 0x03, 0x00, 0x00, 0xfd, 0x13, 0x00, 0x00, 0xfd, 0x13, 0x00, 
	0x00, 0xf9, 0x13, 0x00, 0x00, 0xf9, 0x09, 0x00, 0x00, 0xf2, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 
	0x00, 0x08, 0x03, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'JoystickDown', 28x15px
const unsigned char myBitmapJoystickDown [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 
	0x00, 0x00, 0x08, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf1, 0x10, 0x00, 0x00, 0xf9, 0x11, 0x00, 
	0x00, 0xf9, 0x13, 0x00, 0x00, 0xfd, 0x0b, 0x00, 0x00, 0xfe, 0x0b, 0x00, 0x00, 0xf8, 0x07, 0x00, 
	0x00, 0xf8, 0x03, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'JoystickLeft', 28x15px
const unsigned char myBitmapJoystickLeft [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x02, 0x03, 0x00, 
	0x00, 0xc0, 0x0f, 0x00, 0x00, 0xe1, 0x0f, 0x00, 0x00, 0xe1, 0x1f, 0x00, 0x00, 0xe1, 0x1f, 0x00, 
	0x00, 0xe1, 0x1f, 0x00, 0x00, 0xc1, 0x0f, 0x00, 0x00, 0x82, 0x0f, 0x00, 0x00, 0x00, 0x04, 0x00, 
	0x00, 0x08, 0x03, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'JoystickRight', 28x15px
const unsigned char myBitmapJoystickRight [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x1a, 0x00, 0x00, 
	0x00, 0x3e, 0x08, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0xff, 0x10, 0x00, 0x00, 0xff, 0x10, 0x00, 
	0x00, 0x7f, 0x10, 0x00, 0x00, 0x7f, 0x08, 0x00, 0x00, 0x3e, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 
	0x00, 0x08, 0x03, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'JoystickUp', 28x15px
const unsigned char myBitmapJoystickUp [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0xfc, 0x03, 0x00, 0x00, 0xfa, 0x03, 0x00, 
	0x00, 0xfc, 0x0b, 0x00, 0x00, 0xfd, 0x03, 0x00, 0x00, 0xf9, 0x13, 0x00, 0x00, 0xf1, 0x11, 0x00, 
	0x00, 0x61, 0x10, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x02, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 
	0x00, 0x08, 0x03, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'No', 28x15px
const unsigned char myBitmapNo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x04, 0x04, 0x00, 
	0x00, 0x02, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x81, 0x10, 0x00, 0x00, 0x41, 0x10, 0x00, 
	0x00, 0x21, 0x10, 0x00, 0x00, 0x12, 0x08, 0x00, 0x00, 0x0c, 0x04, 0x00, 0x00, 0x18, 0x03, 0x00, 
	0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'Remote', 28x15px
const unsigned char myBitmapRemote [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x84, 0x00, 
	0x00, 0x02, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'Robot', 48x35px
const unsigned char epd_bitmap_Robot [] PROGMEM = {
	0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x70, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x38, 
	0x00, 0x00, 0x00, 0xc0, 0x01, 0xc0, 0x01, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x06, 
	0x00, 0x00, 0x30, 0x00, 0x80, 0x01, 0x00, 0x00, 0xc0, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x06, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0xfd, 0x03, 0x00, 0x00, 
	0x00, 0x40, 0x05, 0x02, 0x00, 0x00, 0xe0, 0x5f, 0x05, 0x02, 0x00, 0x00, 0x20, 0x50, 0x05, 0x02, 
	0x00, 0x00, 0x20, 0x50, 0x05, 0x02, 0x00, 0x00, 0x20, 0x50, 0x05, 0x02, 0x00, 0x00, 0x20, 0x50, 
	0x05, 0x02, 0x00, 0x00, 0x20, 0x50, 0x05, 0x02, 0x00, 0x00, 0x20, 0x50, 0x05, 0x02, 0x00, 0x00, 
	0x20, 0x50, 0x05, 0x02, 0x00, 0x00, 0x20, 0x50, 0x05, 0x02, 0x00, 0x00, 0x20, 0x50, 0x05, 0x02, 
	0x00, 0x00, 0x20, 0x50, 0x05, 0x02, 0x00, 0x00, 0x20, 0x50, 0x05, 0x02, 0x00, 0x00, 0x20, 0x50, 
	0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 
	0x00, 0x06, 0x80, 0x01, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x06, 0x00, 0x00, 0x30, 0x00, 0x00, 0x38, 
	0x00, 0x00, 0x0e, 0x00, 0x00, 0xc0, 0x01, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x38, 0x00, 0x00, 
	0x00, 0x00, 0x70, 0x07, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00
};


U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, U8X8_PIN_NONE, /* clock=*/ 9, /* data=*/ 8);



void drawLogo(){
    u8g2.clearBuffer();
    u8g2.drawXBMP(0, 0, 128, 64, RIOTLogo);
    u8g2.sendBuffer();
    delay(2000);  // Show logo for 2 seconds
    

}

void U8G2EZ_init(){
    u8g2.begin();
    u8g2.setFont(u8g2_font_t0_12b_mf);
    u8g2.setColorIndex(1);
    drawLogo();
    Serial.println("Printing logo:");
}

void drawSimple(const char *str, int d, int x, int y, bool setScreen){
    
    u8g2.setFont(u8g2_font_ncenB08_tr); // Set any readable font
    u8g2.drawStr(x, y, str);
    if(setScreen){
    u8g2.sendBuffer();
    delay(d);
    }
    
}




void printMainMenu(uint16_t analogPins[], bool digitalPins[], uint8_t dir[], uint8_t mag[], bool connected, int battery = 0){
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_5x8_tf);
    
    /*
    switch(battery){
        case 0:
            u8g2.drawXBMP(5, 1, 28, 15, myBitmap0_25Battery);
            break;
        case 1:
            u8g2.drawXBMP(5, 1, 28, 15, myBitmap25_50Battery);
            break;
        case 2:
            u8g2.drawXBMP(5, 1, 28, 15, myBitmap50_75Battery);
            break;
        case 3:
            u8g2.drawXBMP(5, 1, 28, 15, myBitmap75_100Battery);
            break;

        default:
            break;
    }
    */
    u8g2.drawXBMP(5, 1, 28, 15, myBitmapConnected);
    if(!connected){
        u8g2.drawXBMP(5, 1, 28, 15, myBitmapNo);
    }
    
    

  uint8_t line = 1;
int joystickheight = 20;
int joystickwidth = 65;

int joysticksizew = 28;
int joysticksizeh = 15;

switch(dir[0]){
    case 0:
        u8g2.drawXBMP(joystickwidth, joystickheight, joysticksizew, joysticksizeh, myBitmapJoystickCenter);
        break;
    case 1:
        u8g2.drawXBMP(joystickwidth, joystickheight, joysticksizew, joysticksizeh, myBitmapJoystickUp);
        break;
    case 2:
        u8g2.drawXBMP(joystickwidth, joystickheight, joysticksizew, joysticksizeh,myBitmapJoystickDown);
        break;
    case 3:
        u8g2.drawXBMP(joystickwidth, joystickheight, joysticksizew, joysticksizeh,myBitmapJoystickLeft);
        break;
    case 4:
        u8g2.drawXBMP(joystickwidth, joystickheight, joysticksizew, joysticksizeh, myBitmapJoystickRight);
        break;
    default:
        u8g2.drawXBMP(joystickwidth, joystickheight, joysticksizew, joysticksizeh, myBitmapJoystickCenter);
        break;
}


switch(dir[1]){
    case 0:
        u8g2.drawXBMP(joystickwidth+ 20, joystickheight , joysticksizew, joysticksizeh, myBitmapJoystickCenter);
        break;
    case 1:
        u8g2.drawXBMP(joystickwidth+ 20, joystickheight, joysticksizew, joysticksizeh, myBitmapJoystickDown);
        break;
    case 2:
        u8g2.drawXBMP(joystickwidth+ 20, joystickheight, joysticksizew, joysticksizeh,myBitmapJoystickUp);
        break;
    case 3:
        u8g2.drawXBMP(joystickwidth+ 20, joystickheight, joysticksizew, joysticksizeh,myBitmapJoystickLeft);
        break;
    case 4:
        u8g2.drawXBMP(joystickwidth+ 20, joystickheight, joysticksizew, joysticksizeh, myBitmapJoystickRight);
        break;
    default:
        u8g2.drawXBMP(joystickwidth, joystickheight, joysticksizew, joysticksizeh, myBitmapJoystickCenter);
        break;
}

int buttonSizew = 28;
int buttonSizeh = 15;

digitalPins[0] ? u8g2.drawXBMP(65, 5, buttonSizew, buttonSizeh, myBitmapButtonPressed) : u8g2.drawXBMP(65, 5, buttonSizew, buttonSizeh, myBitmapButtonUnpressed);
digitalPins[1] ? u8g2.drawXBMP(85, 5, buttonSizew, buttonSizeh, myBitmapButtonPressed) : u8g2.drawXBMP(85, 5, buttonSizew, buttonSizeh, myBitmapButtonUnpressed);
digitalPins[3] ? u8g2.drawXBMP(90, 35, buttonSizew, buttonSizeh, myBitmapButtonPressed) : u8g2.drawXBMP(90, 35, buttonSizew, buttonSizeh, myBitmapButtonUnpressed);
digitalPins[2] ? u8g2.drawXBMP(105, 21, buttonSizew, buttonSizeh, myBitmapButtonPressed) : u8g2.drawXBMP(105, 21, buttonSizew, buttonSizeh, myBitmapButtonUnpressed);


u8g2.drawXBMP(5, 20, 48, 35, epd_bitmap_Robot);
/*
enum Direction {
    STOP = 0,
    FORWARD = 1,
    BACKWARD = 2,
    LEFT = 3,
    RIGHT = 4,
    

};
*/

u8g2.setFont(u8g2_font_open_iconic_all_1x_t);

switch(dir[0]){
    case 0:

    break;
    case 1:
        u8g2.drawGlyph(24, 42, 76); // Draws a forward arrow at (24, 42)
    break;
    case 2:
        u8g2.drawGlyph(24, 42, 73); // Draws a backward arrow at (24, 42)
    break;
    case 3:
        u8g2.drawGlyph(24, 42, 75); // Draws a left arrow at (24, 42)
    break;
    case 4:
        u8g2.drawGlyph(24, 42, 74); // Draws a left arrow at (24, 42)
    break;
    default:
    break;
}

switch(dir[1]){
    u8g2.drawGlyph(24, 42, 76); // Draws a forward arrow at (24, 42)
}


  // Display digital pin states
  //for(uint16_t i = 0; i < sizeof(analogPins); i++){
  //  char buf[15];
  //  snprintf(buf, sizeof(buf), "A%d: %s", i, analogPins[i]);
  //  u8g2.drawStr(0, line * 8, buf);
  //}
  /*
  for (uint8_t i = 0; i < sizeof(digitalPins); ++i) {
    char buf[7];
    snprintf(buf, sizeof(buf), "D%d: %s", i, digitalPins[i] ? "1" : "0");
    u8g2.drawStr(0, line * 8, buf);
    line++;
  }


  

  
  // Display analog pin readings
  for (uint8_t i = 0; i < sizeof(analogPins); ++i) {
    int val = analogRead(analogPins[i]);
    char buf[9];
    snprintf(buf, sizeof(buf), "A%d: %4d", i, analogPins[i]);
    u8g2.drawStr(64, i * 8 + 8, buf);
  }

  char buf1[12];
  char buf2[12];
  //char buf3[15];

  snprintf(buf1, sizeof(buf1), "%d -- %d",dir[0], dir[1] );
  u8g2.drawStr(0, 5 * 8, buf1);
  snprintf(buf2, sizeof(buf2), "%d -- %d",mag[0], mag[1]);
  u8g2.drawStr(0, 6*8,buf2);
  //snprintf(buf3, sizeof(buf3), "CONNECTED?: %d",connected);
  //u8g2.drawStr(0, 7*8,buf3);
*/
    
  u8g2.sendBuffer();

}


void drawConfimReceiver(String text, uint8_t selMac[]){
    u8g2.clearBuffer();
    u8g2.drawStr(0, 10, "Selecting Radio:" );

    char bufMac[25];
    snprintf(bufMac, sizeof(bufMac), "%02X:%02X:%02X:%02X:%02X:%02X",selMac[0], selMac[1],selMac[2],selMac[3],selMac[4],selMac[5] );
    u8g2.drawStr(0,30, bufMac);

    u8g2.sendBuffer();
}
        



#endif